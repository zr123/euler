//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

let rec fib (n: int array) max = 
  if n.[n.Length-1] < max then (fib (Array.append n [|n.[n.Length-1] + n.[n.Length-2]|]) max)
  else n

printfn "%d" (Array.sum (Array.filter (fun x -> x % 2 = 0) (fib [|1;1|] 4000000)))

// lösung 2

let rec fib2 (n: int List) max = 
  if n.[n.Length-1] < max then (fib2 (List.append n [n.[n.Length-1] + n.[n.Length-2]]) max)
  else n

printfn "%d" (List.sum (List.filter (fun x -> x % 2 = 0) (fib2 [1;1] 4000000)))

// lösung 3

let fibseq = 
  Seq.unfold (fun (a, b) -> Some(a, (b, a+b))) (0, 1)

printfn "%d" (Seq.sum (Seq.filter (fun n -> n % 2= 0) (fibseq |> Seq.takeWhile (fun n -> (n < 4000000)))))